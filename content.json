[{"title":"ASP.NET+三层架构+Echarts绘制图表【原创】","date":"2020-04-09T08:16:20.064Z","path":"2020/04/09/ASP.NET+三层架构+Echarts绘制图表/","text":"本文介绍了在ASP.NET中使用ECharts的详细过程，希望对使用该方法的朋友有所帮助。 相关的js文件下载：https://pan.baidu.com/s/1y9AIdlzhMzXINlRGjp3BAQ相关Echarts的js文件包提取码：tfr3 一、首先去百度搜索Echarts去下载需要的图表实例Echarts图表实例下载。其中可以自定义下载，也可以下载全部，根据个人需求进行实例的下载即可！ 二、创建好DAL层和BLL层将需要显示的数据信息利用==DAL层==以及==BLL层==写好！例如 DAL层： 12345678910 /// &lt;summary&gt;/// 查询Project表，显示后台图表需要显示的数据/// &lt;/summary&gt;/// &lt;returns&gt;&lt;/returns&gt;public static DataTable SelectProjectTubiao()&#123; string sql = @\"select ProjectTypes,sum(AllMoney) AllMoney,sum(ToFinance) ToFinance from Project group by Project.ProjectTypes\"; DataTable dt = DBHelper.GetDataSet(sql); return dt;&#125; BLL层： 12345678 /// &lt;summary&gt;/// 查询Project表，显示后台图表需要显示的数据/// &lt;/summary&gt;/// &lt;returns&gt;&lt;/returns&gt;public static DataTable SelectProjectTubiao()&#123; return DAL.ProjectDAL.SelectProjectTubiao();&#125; 三、在js文件夹中新建一个js文件（该js文件写绘制图表的js代码）四、在项目中创建一个新.aspx页面或者打开你需要放图表的页面在新的.aspx页面或者你需要显示图表的页面中创建div，并且为div设置CSS样式；同时引用jquery-3.4.1.min.js、echarts.min.js和你刚刚新建的js文件。==【注意】必须先引用jquery-3.4.1.min.js，不然会报错！因为Echarts是基于JQuery库==；width和height根据自己的需要自行设定。 1234567891011121314151617181920212223&lt;%@ Page Title=\"\" Language=\"C#\" MasterPageFile=\"~/BackStage.Master\" AutoEventWireup=\"true\" CodeBehind=\"Tubiao.aspx.cs\" Inherits=\"ZMCrowdfunding.Tubiao\" %&gt;&lt;asp:Content ID=\"Content1\" ContentPlaceHolderID=\"head\" runat=\"server\"&gt; &lt;link rel=\"icon\" href=\"images/zm.ico\" type=\"image/x-icon\" /&gt; &lt;script src=\"js/jquery-3.4.1.min.js\"&gt;&lt;/script&gt; &lt;script src=\"js/echarts.min.js\"&gt;&lt;/script&gt; &lt;script src=\"js/myEcharts.js\"&gt;&lt;/script&gt; &lt;style&gt; .tb&#123; width:100%; margin-top:20px; &#125; #bar &#123; width:1300px; height:600px; &#125; &lt;/style&gt;&lt;/asp:Content&gt;&lt;asp:Content ID=\"Content2\" ContentPlaceHolderID=\"ContentPlaceHolder1\" runat=\"server\"&gt; &lt;div class=\"tb\"&gt; &lt;%-- 柱状图 --%&gt; &lt;div id=\"bar\"&gt;&lt;/div&gt; &lt;/div&gt;&lt;/asp:Content&gt; 五、在项目中创建ajax文件夹并且在该文件夹下创建一般处理程序 需==引用BLL层== 需==添加程序集类库引用：在引用中右键，选择添加引用，搜索json=&gt;勾选json.NET .NET 4.0==返回JSON数据12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152using Newtonsoft.Json;using System;using System.Collections.Generic;using System.Linq;using System.Web;using BLL;using System.Web.Script.Serialization;namespace WebApplication1&#123; /// &lt;summary&gt; /// Handler 的摘要说明 /// &lt;/summary&gt; public class Handler : IHttpHandler &#123; public string jsonData = \"\"; //声明变量 public void ProcessRequest(HttpContext context) &#123; //调用命令 string command = context.Request[\"cmd\"]; switch (command) &#123; case \"bar\": GetBars(context); break; &#125;; &#125; /// &lt;summary&gt; /// 绘制柱状图的json数据方法 /// &lt;/summary&gt; /// &lt;param name=\"context\"&gt;&lt;/param&gt; public void GetBars(HttpContext context) &#123; context.Response.ContentType = \"text/plain\"; context.Response.Charset = \"utf-8\"; //数据Json化 //JobBLL.Job_analysisDAL()，这是调用三层架构中的BLL层 jsonData = JsonConvert.SerializeObject(ProjectBLL.SelectProjectTubiao()); context.Response.Write(jsonData); &#125; public bool IsReusable &#123; get &#123; return false; &#125; &#125; &#125;&#125; 六、在之前新建的js文件中编写绘制图表的js代码在Echarts官网中有相关的图表的代码属性。例如柱状图：柱状图。可在页面中动态的修改代码！筛选出自己所需要的代码片段！使用Ajax读取后台数据 ；并将定义的数组中的数据对象赋值给options对象内的data 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179//各部们平均薪资$(function () &#123; Pie();&#125;);//定义数组var department_name =[];var Salary = [];function Pie() &#123; $.ajax(&#123; type: \"post\", async: false, data: &#123; cmd: \"pie\" &#125;, url: \"ajax/Handler.ashx\", //一般处理程序的路由：一般处理程序的路径 dataType: \"json\", //传输过来的数据格式 success: function (data) &#123; for (var i = 0; i &lt; data.length; i++) &#123; department_name.push(data[i].bumen); Salary.push(&#123; name: data[i].bumen, value: data[i].avgSalary &#125;); //存储为键值对的json数据 &#125; //将返回的names和scores对象赋值给options对象内的data InitPie(department_name, Salary); &#125;, error: function (xhr, textStatus, errorThrown) &#123; /*错误信息处理*/ alert(\"进入error---\"); alert(\"状态码：\" + xhr.status); alert(\"状态:\" + xhr.readyState); //当前状态,0-未初始化，1-正在载入，2-已经载入，3-数据进行交互，4-完成。 alert(\"错误信息:\" + xhr.statusText); alert(\"返回响应信息：\" + xhr.responseText);//这里是详细的信息 alert(\"请求状态：\" + textStatus); alert(errorThrown); alert(\"请求失败\"); &#125; &#125;);&#125;function InitPie(department_name, Salary) &#123; // var myChartPie = echarts.init(document.getElementById('pie')); option_Pie = &#123; title: &#123; text: '各部门薪资分析', //可视化主标题 textStyle: &#123; color: 'red', fontWeight: 'bold', fontStyle: 'italic', fontFamily: '微软雅黑' &#125;, //主标题的样式 subtext: '各部门平均薪资对比', //副标题 subtextStyle: &#123; color: 'black', fontFamily: '微软雅黑' &#125;, //副标题的样式 x: 'center' &#125;, //图例 legend: &#123; data: department_name, orient: 'vertical', //图例列表的布局朝向，取值：'vertical'/'horizontal' left: '10%', &#125;, //提示框组件 tooltip: &#123; trigger: 'item', //触发类型；item:数据项图形触发，主要在散点图，饼图等无类目轴的图表中使用；axis：坐标轴触发，主要在柱状图，折线图等会使用类目轴的图表中使用 formatter: \"&#123;a&#125;&lt;br/&gt;&#123;b&#125; ：&#123;c&#125;元 (&#123;d&#125;%)\" &#125;, toolbox: &#123; feature: &#123; saveAsImage: &#123; show: true &#125; &#125; &#125;, label: &#123; show: true, &#125;, series: [&#123; name:'部门', radius: '50%', center:['50%','55%'], data: Salary, type: 'pie', &#125;] &#125;; // 使用刚指定的配置项和数据显示图表-绑定数据 myChartPie.setOption(option_Pie);&#125;//部门柱状图$(function () &#123; Bar();&#125;);var names = new Array(); //定义数组var scores = new Array();function Bar() &#123; // 基于准备好的dom，初始化echarts实例 var myChart = echarts.init(document.getElementById('bar')); $.ajax(&#123; type: \"post\", async: false, data: &#123; cmd: \"bar\" &#125;, url: \"ajax/Handler.ashx\", dataType: \"json\", success: function (data) &#123; //循环 for (var i = 0; i &lt; data.length; i++) &#123; names.push(data[i].department_name); scores.push(data[i].number); &#125; //将返回的names和scores对象赋值给options对象内的data InitChart(names, scores); &#125;, error: function (error) &#123; alert(\"Ajax获取服务器数据出错了！\" + error); &#125; &#125;);&#125;function InitChart(names, scores) &#123; // 基于准备好的dom，初始化echarts实例 var myChart = echarts.init(document.getElementById('bar')); option = &#123; title: &#123; text: '部门分析', textStyle: &#123; color: 'red', fontWeight: 'bold', fontStyle: 'italic', fontFamily: '微软雅黑' &#125;, subtext: '各部门人数对比', subtextStyle: &#123; color: 'black', fontFamily: '微软雅黑' &#125;, x: 'center' &#125;, grid: &#123; top: '20%', &#125;, xAxis: &#123; name: '部门名称', type: 'category', data: names, axisLabel: &#123; rotate: '35', interval:0 &#125; &#125;, tooltip: &#123; trigger: 'axis', &#125;, toolbox: &#123; feature: &#123; magicType: &#123; show: true, type: ['line', 'bar'] &#125;, restore: &#123; show: true &#125;, saveAsImage: &#123; show: true &#125; &#125; &#125;, yAxis: &#123; type: 'value', name: '人数' &#125;, series: [&#123; data: scores, type: 'bar', label: &#123; normal: &#123; formatter:\"&#123;c&#125;\"+\"人\", show: true, position: 'top', textStyle: &#123; color: 'black', fontFamily:'微软雅黑' &#125; &#125; &#125;, &#125;] &#125;; // 使用刚指定的配置项和数据显示图表-绑定数据 myChart.setOption(option);&#125;","tags":[{"name":"ASP.NET","slug":"ASP-NET","permalink":"http://yoursite.com/tags/ASP-NET/"},{"name":"三层架构","slug":"三层架构","permalink":"http://yoursite.com/tags/%E4%B8%89%E5%B1%82%E6%9E%B6%E6%9E%84/"},{"name":"Echarts","slug":"Echarts","permalink":"http://yoursite.com/tags/Echarts/"}]},{"title":"Hello World","date":"2020-04-09T07:33:17.669Z","path":"2020/04/09/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[]}]